# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:47:29+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import AnyUrl, BaseModel, Field, RootModel, conint, constr


class Class(Enum):
    AddMediaIntent = 'AddMediaIntent'


class Method(Enum):
    AddMediaIntentHandling_confirm = 'AddMediaIntentHandling.confirm'


class Method1(Enum):
    AddMediaIntentHandling_handle = 'AddMediaIntentHandling.handle'


class Method2(Enum):
    AddMediaIntentHandling_resolveMediaItems = (
        'AddMediaIntentHandling.resolveMediaItems'
    )
    AddMediaIntentHandling_resolveMediaDestination = (
        'AddMediaIntentHandling.resolveMediaDestination'
    )
    AddMediaIntentHandling_confirm = 'AddMediaIntentHandling.confirm'
    AddMediaIntentHandling_handle = 'AddMediaIntentHandling.handle'


class Method3(Enum):
    AddMediaIntentHandling_resolveMediaDestination = (
        'AddMediaIntentHandling.resolveMediaDestination'
    )


class Method4(Enum):
    AddMediaIntentHandling_resolveMediaItems = (
        'AddMediaIntentHandling.resolveMediaItems'
    )


class Class1(Enum):
    AddMediaIntentResponse = 'AddMediaIntentResponse'


class AddMediaIntentResponseCode(Enum):
    unspecified = 'unspecified'
    ready = 'ready'
    inProgress = 'inProgress'
    success = 'success'
    failure = 'failure'
    failureRequiringAppLaunch = 'failureRequiringAppLaunch'


class Class2(Enum):
    AddMediaMediaDestinationResolutionResult = (
        'AddMediaMediaDestinationResolutionResult'
    )


class AddMediaMediaDestinationUnsupportedReason(Enum):
    playlistNameNotFound = 'playlistNameNotFound'
    playlistNotEditable = 'playlistNotEditable'


class Class3(Enum):
    AddMediaMediaItemResolutionResult = 'AddMediaMediaItemResolutionResult'


class AddMediaMediaItemUnsupportedReason(Enum):
    loginRequired = 'loginRequired'
    subscriptionRequired = 'subscriptionRequired'
    unsupportedMediaType = 'unsupportedMediaType'
    explicitContentSettings = 'explicitContentSettings'
    restrictedContent = 'restrictedContent'
    regionRestriction = 'regionRestriction'


class Class4(Enum):
    BooleanResolutionResult = 'BooleanResolutionResult'


class ConfirmationRequired2(BaseModel):
    valueToConfirm: bool


class Success2(BaseModel):
    resolvedValue: bool


class Constraints(BaseModel):
    allowExplicitContent: Optional[bool] = True
    maximumQueueSegmentItemCount: Optional[conint(ge=50, le=1000)] = 1000
    updateUserTasteProfile: Optional[bool] = True


class Artwork(BaseModel):
    url: Optional[constr(max_length=2000)] = None


class GenreName(RootModel[constr(max_length=250)]):
    root: constr(max_length=250)


class ContentAttributes(BaseModel):
    albumName: Optional[constr(max_length=250)] = Field(
        None, examples=['Blood On the Tracks']
    )
    artistName: Optional[constr(max_length=1000)] = Field(None, examples=['Bob Dylan'])
    artwork: Optional[Artwork] = None
    composerName: Optional[constr(max_length=250)] = Field(None, examples=['B. Dylan'])
    durationInMillis: Optional[int] = None
    genreNames: Optional[List[GenreName]] = Field(None, max_length=30)
    name: Optional[constr(max_length=250)] = Field(
        None, examples=['Tangled Up In Blue']
    )
    trackNumber: Optional[int] = Field(None, examples=[1])


class ContentIdentifier(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000) = Field(..., examples=['j15f8A3cuU0GG'])


class ExecutionMetrics(BaseModel):
    completed: Optional[datetime] = None
    duration: Optional[float] = None
    received: Optional[datetime] = None


class ExplicitDateComponents(BaseModel):
    calendarIdentifier: Optional[str] = None
    day: Optional[int] = None
    era: Optional[int] = None
    hour: Optional[int] = None
    minute: Optional[int] = None
    month: Optional[int] = None
    nanosecond: Optional[int] = None
    second: Optional[int] = None
    timeZone: Optional[str] = None
    year: Optional[int] = None


class OptEnum(Enum):
    resolveMediaDestination = 'resolveMediaDestination'
    confirm = 'confirm'


class OptEnum1(Enum):
    resolvePlayShuffled = 'resolvePlayShuffled'
    resolvePlaybackRepeatMode = 'resolvePlaybackRepeatMode'
    resolvePlaybackQueueLocation = 'resolvePlaybackQueueLocation'
    resolveResumePlayback = 'resolveResumePlayback'


class OptEnum2(Enum):
    resolveAffinityType = 'resolveAffinityType'


class PlayMedia1(BaseModel):
    hdr: Optional[Dict[str, Any]] = Field(None, examples=[{'x-headless-client': True}])
    url: Optional[constr(min_length=1, max_length=4000)] = '/queues/playMedia'


class UpdateActivity(BaseModel):
    hdr: Optional[Dict[str, Any]] = None
    url: Optional[constr(min_length=1, max_length=4000)] = '/queues/updateActivity'


class Queues(BaseModel):
    hdr: Optional[Dict[str, Any]] = Field(
        None, examples=[{'x-content-min-ttl': 1200, 'x-media-catalog-region': 'en_US'}]
    )
    playMedia: Optional[PlayMedia1] = None
    updateActivity: Optional[UpdateActivity] = None


class Media(BaseModel):
    queues: Optional[Queues] = None


class ExtensionConfigTag(
    RootModel[constr(pattern=r'["][ -~]{1000}["]', max_length=1002)]
):
    root: constr(pattern=r'["][ -~]{1000}["]', max_length=1002)


class ExtensionEndpointConfig(BaseModel):
    hdr: Optional[Dict[str, Any]] = None
    url: Optional[constr(min_length=0, max_length=2000)] = None


class Intent(BaseModel):
    class_: str = Field(..., alias='class')
    identifier: str


class IntentResolutionResult(BaseModel):
    class_: str = Field(..., alias='class')
    needsValue: Optional[Dict[str, Any]] = None
    notRequired: Optional[Dict[str, Any]] = None
    unsupported: Optional[Dict[str, Any]] = None


class MediaAffinityType(Enum):
    unknown = 'unknown'
    like = 'like'
    dislike = 'dislike'


class Class5(Enum):
    MediaAffinityTypeResolutionResult = 'MediaAffinityTypeResolutionResult'


class ConfirmationRequired3(BaseModel):
    mediaAffinityTypeToConfirm: MediaAffinityType


class Success3(BaseModel):
    resolvedMediaAffinityType: MediaAffinityType


class MediaAffinityTypeResolutionResult(IntentResolutionResult):
    class_: Optional[Class5] = Field(None, alias='class')
    confirmationRequired: Optional[ConfirmationRequired3] = None
    success: Optional[Success3] = None


class MediaDestinationType(Enum):
    library = 'library'
    playlist = 'playlist'


class MediaDestination(BaseModel):
    mediaDestinationType: MediaDestinationType


class MediaDestinationType1(Enum):
    library = 'library'


class MediaDestinationLibrary(MediaDestination):
    mediaDestinationType: MediaDestinationType1


class MediaDestinationType2(Enum):
    playlist = 'playlist'


class MediaDestinationPlaylist(MediaDestination):
    mediaDestinationType: MediaDestinationType2
    playlistName: constr(min_length=1, max_length=1000)


class MediaItemType(Enum):
    unknown = 'unknown'
    song = 'song'
    album = 'album'
    artist = 'artist'
    genre = 'genre'
    playlist = 'playlist'
    podcastShow = 'podcastShow'
    podcastEpisode = 'podcastEpisode'
    podcastPlaylist = 'podcastPlaylist'
    musicStation = 'musicStation'
    audioBook = 'audioBook'
    movie = 'movie'
    tvShow = 'tvShow'
    tvShowEpisode = 'tvShowEpisode'
    musicVideo = 'musicVideo'
    podcastStation = 'podcastStation'
    radioStation = 'radioStation'
    station = 'station'
    music = 'music'
    algorithmicRadioStation = 'algorithmicRadioStation'
    news = 'news'


class MediaReference(Enum):
    unknown = 'unknown'
    currentlyPlaying = 'currentlyPlaying'
    my = 'my'


class MediaSortOrder(Enum):
    unknown = 'unknown'
    newest = 'newest'
    oldest = 'oldest'
    best = 'best'
    worst = 'worst'
    popular = 'popular'
    unpopular = 'unpopular'
    trending = 'trending'
    recommended = 'recommended'


class PlayMediaControlActivity(BaseModel):
    playElapsed: Optional[conint(ge=5)] = None
    playElapsedInterval: Optional[conint(ge=5)] = None
    playPaused: Optional[conint(ge=5, le=60)] = 5


class PlayMediaControlCommandSet(BaseModel):
    bookmarkTrack: Optional[bool] = None
    dislikeTrack: Optional[bool] = None
    likeTrack: Optional[bool] = None
    nextTrack: Optional[bool] = None
    preferSkipBackward: Optional[bool] = None
    preferSkipForward: Optional[bool] = None
    previousTrack: Optional[bool] = None
    seekToPlaybackPosition: Optional[bool] = None
    skipBackward: Optional[bool] = None
    skipForward: Optional[bool] = None


class PlayMediaControlScheme(Enum):
    custom = 'custom'
    onDemand = 'onDemand'
    internetRadio = 'internetRadio'
    liveStreaming = 'liveStreaming'
    audioBook = 'audioBook'
    podcast = 'podcast'
    advertisement = 'advertisement'


class Class6(Enum):
    PlayMediaIntent = 'PlayMediaIntent'


class Method5(Enum):
    PlayMediaIntentHandling_handle = 'PlayMediaIntentHandling.handle'


class Method6(Enum):
    PlayMediaIntentHandling_resolveMediaItems = (
        'PlayMediaIntentHandling.resolveMediaItems'
    )
    PlayMediaIntentHandling_resolvePlayShuffled = (
        'PlayMediaIntentHandling.resolvePlayShuffled'
    )
    PlayMediaIntentHandling_resolvePlaybackQueueLocation = (
        'PlayMediaIntentHandling.resolvePlaybackQueueLocation'
    )
    PlayMediaIntentHandling_resolvePlaybackRepeatMode = (
        'PlayMediaIntentHandling.resolvePlaybackRepeatMode'
    )
    PlayMediaIntentHandling_resolveResumePlayback = (
        'PlayMediaIntentHandling.resolveResumePlayback'
    )
    PlayMediaIntentHandling_handle = 'PlayMediaIntentHandling.handle'


class Method7(Enum):
    PlayMediaIntentHandling_resolveMediaItems = (
        'PlayMediaIntentHandling.resolveMediaItems'
    )


class Method8(Enum):
    PlayMediaIntentHandling_resolvePlayShuffled = (
        'PlayMediaIntentHandling.resolvePlayShuffled'
    )


class Method9(Enum):
    PlayMediaIntentHandling_resolvePlaybackQueueLocation = (
        'PlayMediaIntentHandling.resolvePlaybackQueueLocation'
    )


class Method10(Enum):
    PlayMediaIntentHandling_resolvePlaybackRepeatMode = (
        'PlayMediaIntentHandling.resolvePlaybackRepeatMode'
    )


class Method11(Enum):
    PlayMediaIntentHandling_resolveResumePlayback = (
        'PlayMediaIntentHandling.resolveResumePlayback'
    )


class Class7(Enum):
    PlayMediaIntentResponse = 'PlayMediaIntentResponse'


class PlayMediaIntentResponseCode(Enum):
    unspecified = 'unspecified'
    success = 'success'
    failure = 'failure'
    failureRequiringAppLaunch = 'failureRequiringAppLaunch'
    failureUnknownMediaType = 'failureUnknownMediaType'
    failureNoUnplayedContent = 'failureNoUnplayedContent'
    failureRestrictedContent = 'failureRestrictedContent'


class Class8(Enum):
    PlayMediaMediaItemResolutionResult = 'PlayMediaMediaItemResolutionResult'


class PlayMediaMediaItemUnsupportedReason(Enum):
    loginRequired = 'loginRequired'
    subscriptionRequired = 'subscriptionRequired'
    unsupportedMediaType = 'unsupportedMediaType'
    explicitContentSettings = 'explicitContentSettings'
    restrictedContent = 'restrictedContent'
    regionRestriction = 'regionRestriction'


class PlaybackQueueLocation(Enum):
    unknown = 'unknown'
    now = 'now'
    next = 'next'
    later = 'later'


class Class9(Enum):
    PlaybackQueueLocationResolutionResult = 'PlaybackQueueLocationResolutionResult'


class ConfirmationRequired5(BaseModel):
    playbackQueueLocationToConfirm: PlaybackQueueLocation


class Success5(BaseModel):
    resolvedPlaybackQueueLocation: PlaybackQueueLocation


class PlaybackQueueLocationResolutionResult(IntentResolutionResult):
    class_: Optional[Class9] = Field(None, alias='class')
    confirmationRequired: Optional[ConfirmationRequired5] = None
    success: Optional[Success5] = None


class PlaybackRepeatMode(Enum):
    unknown = 'unknown'
    none = 'none'
    all = 'all'
    one = 'one'


class Class10(Enum):
    PlaybackRepeatModeResolutionResult = 'PlaybackRepeatModeResolutionResult'


class ConfirmationRequired6(BaseModel):
    playbackRepeatModeToConfirm: PlaybackRepeatMode


class Success6(BaseModel):
    resolvedPlaybackRepeatMode: PlaybackRepeatMode


class PlaybackRepeatModeResolutionResult(IntentResolutionResult):
    class_: Optional[Class10] = Field(None, alias='class')
    confirmationRequired: Optional[ConfirmationRequired6] = None
    success: Optional[Success6] = None


class TraceItem(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class Method12(Enum):
    ProtocolException = 'ProtocolException'


class ProtocolExceptionReason(Enum):
    unsupported = 'unsupported'
    unauthorized = 'unauthorized'
    unexpected = 'unexpected'
    invalid = 'invalid'
    unparseable = 'unparseable'
    deprecated = 'deprecated'
    internal = 'internal'
    complex = 'complex'
    busy = 'busy'


class QueueActivityReportEvent(Enum):
    local_playing_elapsed = 'local.playing.elapsed'
    local_playing_paused = 'local.playing.paused'
    local_playing_continued = 'local.playing.continued'
    local_playing_scrub = 'local.playing.scrub'
    local_playing_fastForward = 'local.playing.fastForward'
    local_playing_fastRewind = 'local.playing.fastRewind'
    local_playing_transitioned_naturally = 'local.playing.transitioned.naturally'
    local_playing_transitioned_skip_next = 'local.playing.transitioned.skip_next'
    local_playing_transitioned_skip_previous = (
        'local.playing.transitioned.skip_previous'
    )
    local_playing_transitioned_queue_replaced = (
        'local.playing.transitioned.queue_replaced'
    )
    local_stopped_naturally = 'local.stopped.naturally'
    local_stopped_skip_past_end = 'local.stopped.skip_past_end'
    local_command_like = 'local.command.like'
    local_command_dislike = 'local.command.dislike'
    local_command_bookmark = 'local.command.bookmark'


class QueueIdentifier(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024) = Field(..., examples=['u104823q8201'])


class QueueInsertPointer(BaseModel):
    afterIdentifier: Optional[ContentIdentifier] = None
    replace: Optional[bool] = False


class QueuePlayPointer(BaseModel):
    contentIdentifier: Optional[ContentIdentifier] = None
    offsetInMillis: Optional[int] = Field(None, examples=[10942])


class ServiceDebugReference(RootModel[AnyUrl]):
    root: AnyUrl


class Class11(Enum):
    UpdateMediaAffinityIntent = 'UpdateMediaAffinityIntent'


class Method13(Enum):
    UpdateMediaAffinityIntentHandling_handle = (
        'UpdateMediaAffinityIntentHandling.handle'
    )


class Method14(Enum):
    UpdateMediaAffinityIntentHandling_resolveMediaItems = (
        'UpdateMediaAffinityIntentHandling.resolveMediaItems'
    )
    UpdateMediaAffinityIntentHandling_resolveAffinityType = (
        'UpdateMediaAffinityIntentHandling.resolveAffinityType'
    )
    UpdateMediaAffinityIntentHandling_handle = (
        'UpdateMediaAffinityIntentHandling.handle'
    )


class Method15(Enum):
    UpdateMediaAffinityIntentHandling_resolveAffinityType = (
        'UpdateMediaAffinityIntentHandling.resolveAffinityType'
    )


class Result11(BaseModel):
    resolutionResult: MediaAffinityTypeResolutionResult


class Method16(Enum):
    UpdateMediaAffinityIntentHandling_resolveMediaItems = (
        'UpdateMediaAffinityIntentHandling.resolveMediaItems'
    )


class Class12(Enum):
    UpdateMediaAffinityIntentResponse = 'UpdateMediaAffinityIntentResponse'


class UpdateMediaAffinityIntentResponseCode(Enum):
    unspecified = 'unspecified'
    inProgress = 'inProgress'
    success = 'success'
    failure = 'failure'
    failureRequiringAppLaunch = 'failureRequiringAppLaunch'


class Class13(Enum):
    UpdateMediaAffinityMediaItemResolutionResult = (
        'UpdateMediaAffinityMediaItemResolutionResult'
    )


class UpdateMediaAffinityMediaItemUnsupportedReason(Enum):
    loginRequired = 'loginRequired'
    subscriptionRequired = 'subscriptionRequired'
    unsupportedMediaType = 'unsupportedMediaType'
    explicitContentSettings = 'explicitContentSettings'


class UserActivity(BaseModel):
    activityType: constr(max_length=250) = Field(
        ..., examples=['com.mediastreamingservice.playmedia']
    )
    persistentIdentifier: Optional[constr(max_length=250)] = None
    title: Optional[constr(max_length=250)] = None
    userInfo: Optional[Dict[str, Any]] = Field(None, title='UserActivityUserInfo')
    version: constr(pattern=r'[0-9]+\.[0-9]+\.[0-9]+', max_length=25)


class ConfirmationRequired(BaseModel):
    mediaDestinationToConfirm: MediaDestination


class Disambiguation(BaseModel):
    mediaDestinationsToDisambiguate: List[MediaDestination] = Field(..., min_length=2)


class Success(BaseModel):
    resolvedMediaDestination: MediaDestination


class Unsupported(BaseModel):
    reason: Optional[AddMediaMediaDestinationUnsupportedReason] = None


class AddMediaMediaDestinationResolutionResult(IntentResolutionResult):
    class_: Optional[Class2] = Field(None, alias='class')
    confirmationRequired: Optional[ConfirmationRequired] = None
    disambiguation: Optional[Disambiguation] = None
    success: Optional[Success] = None
    unsupported: Optional[Unsupported] = None


class Unsupported1(BaseModel):
    reason: Optional[AddMediaMediaItemUnsupportedReason] = None


class BooleanResolutionResult(IntentResolutionResult):
    class_: Optional[Class4] = Field(None, alias='class')
    confirmationRequired: Optional[ConfirmationRequired2] = None
    success: Optional[Success2] = None


class Content(BaseModel):
    attributes: Optional[ContentAttributes] = None
    control: Optional[str] = Field('default', examples=['song'])
    identifier: ContentIdentifier
    isLive: Optional[bool] = None
    playIndex: Optional[int] = None
    url: Optional[constr(max_length=2000)] = None


class DateComponents(
    RootModel[
        Union[
            constr(pattern=r'[0-9]{4}'),
            constr(pattern=r'[0-9]{4}-[0-9]{2}'),
            date,
            datetime,
            ExplicitDateComponents,
        ]
    ]
):
    root: Union[
        constr(pattern=r'[0-9]{4}'),
        constr(pattern=r'[0-9]{4}-[0-9]{2}'),
        date,
        datetime,
        ExplicitDateComponents,
    ] = Field(..., examples=['1980'])


class DateComponentsRange(BaseModel):
    endDateComponents: Optional[DateComponents] = None
    startDateComponents: Optional[DateComponents] = None


class AddMedia(ExtensionEndpointConfig):
    opt: Optional[List[OptEnum]] = None


class PlayMedia(ExtensionEndpointConfig):
    opt: Optional[List[OptEnum1]] = None


class UpdateMediaAffinity(ExtensionEndpointConfig):
    opt: Optional[List[OptEnum2]] = None


class Intent1(BaseModel):
    addMedia: Optional[AddMedia] = None
    hdr: Optional[Dict[str, Any]] = Field(
        None, examples=[{'x-service-affinity': 'intent2'}]
    )
    playMedia: PlayMedia
    updateMediaAffinity: Optional[UpdateMediaAffinity] = None


class ExtensionConfig(BaseModel):
    hdr: Optional[Dict[str, Any]] = Field(
        None, examples=[{'x-client-type': 'headless', 'x-service-affinity': 'cluster1'}]
    )
    intent: Intent1
    media: Media
    url: Optional[constr(min_length=1, max_length=2000)] = Field(None, examples=['/v2'])
    version: constr(pattern=r'([0-9]+[.]){2}[0-9]+') = Field(..., examples=['1.0.0'])


class IntentResponse(BaseModel):
    class_: str = Field(..., alias='class')
    userActivity: UserActivity


class InvocationResponse(BaseModel):
    debug: Optional[ServiceDebugReference] = None
    method: str
    metrics: Optional[ExecutionMetrics] = None
    result: Dict[str, Any]


class MediaItem(BaseModel):
    artist: Optional[constr(max_length=1000)] = None
    identifier: constr(max_length=250)
    title: Optional[constr(max_length=1000)] = None
    type: MediaItemType


class MediaSearch(BaseModel):
    albumName: Optional[str] = None
    artistName: Optional[str] = None
    genreNames: Optional[List[str]] = None
    mediaIdentifier: Optional[str] = None
    mediaName: Optional[str] = None
    mediaType: Optional[MediaItemType] = None
    moodNames: Optional[List[str]] = None
    reference: Optional[MediaReference] = None
    releaseDate: Optional[DateComponentsRange] = None
    sortOrder: Optional[MediaSortOrder] = None


class PlayMediaControl(BaseModel):
    activity: Optional[PlayMediaControlActivity] = None
    commands: Optional[PlayMediaControlCommandSet] = None
    scheme: PlayMediaControlScheme


class PlayMediaIntent(Intent):
    class_: Optional[Class6] = Field(None, alias='class')
    mediaItems: Optional[List[MediaItem]] = None
    mediaSearch: Optional[MediaSearch] = None
    playShuffled: Optional[bool] = None
    playbackQueueLocation: Optional[PlaybackQueueLocation] = None
    playbackRepeatMode: Optional[PlaybackRepeatMode] = None
    playbackSpeed: Optional[float] = None
    resumePlayback: Optional[bool] = None


class Params1(BaseModel):
    intent: PlayMediaIntent


class Result6(BaseModel):
    resolutionResult: BooleanResolutionResult


class PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse(InvocationResponse):
    method: Literal['PlayMediaIntentHandling.resolvePlayShuffled']
    result: Result6


class Result7(BaseModel):
    resolutionResult: PlaybackQueueLocationResolutionResult


class PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse(
    InvocationResponse
):
    method: Literal['PlayMediaIntentHandling.resolvePlaybackQueueLocation']
    result: Result7


class Result8(BaseModel):
    resolutionResult: PlaybackRepeatModeResolutionResult


class PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse(
    InvocationResponse
):
    method: Literal['PlayMediaIntentHandling.resolvePlaybackRepeatMode']
    result: Result8


class Result9(BaseModel):
    resolutionResult: BooleanResolutionResult


class PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse(
    InvocationResponse
):
    method: Literal['PlayMediaIntentHandling.resolveResumePlayback']
    result: Result9


class PlayMediaIntentResponse(IntentResponse):
    class_: Class7 = Field(..., alias='class')
    code: PlayMediaIntentResponseCode


class ConfirmationRequired4(BaseModel):
    mediaItemToConfirm: MediaItem


class Disambiguation2(BaseModel):
    mediaItemsToDisambiguate: List[MediaItem] = Field(..., min_length=2)


class Success4(BaseModel):
    resolvedMediaItem: MediaItem


class Unsupported2(BaseModel):
    reason: Optional[PlayMediaMediaItemUnsupportedReason] = None


class PlayMediaMediaItemResolutionResult(IntentResolutionResult):
    class_: Optional[Class8] = Field(None, alias='class')
    confirmationRequired: Optional[ConfirmationRequired4] = None
    disambiguation: Optional[Disambiguation2] = None
    success: Optional[Success4] = None
    unsupported: Optional[Unsupported2] = None


class PlayMediaRequest(BaseModel):
    constraints: Constraints
    userActivity: UserActivity
    version: constr(pattern=r'[0-9]+\.[0-9]+\.[0-9]+')


class PlayerContext(BaseModel):
    activityIdentifier: Optional[constr(max_length=250)] = None
    contentIdentifier: Optional[ContentIdentifier] = None
    offsetInMillis: Optional[int] = Field(None, examples=[10942])
    playbackSpeed: Optional[float] = 1
    queueIdentifier: Optional[QueueIdentifier] = None


class ProtocolException(BaseModel):
    code: Optional[int] = None
    methodIndex: Optional[int] = None
    methodName: Optional[str] = None
    reason: ProtocolExceptionReason
    retryWithDelay: Optional[float] = -1
    trace: Optional[List[TraceItem]] = Field(None, max_length=64)


class ProtocolExceptionInvocationResponse(InvocationResponse):
    exception: ProtocolException
    method: Literal['ProtocolException']


class QueueControlMapping(BaseModel):
    default: PlayMediaControl


class Session(BaseModel):
    constraints: Constraints
    deadline: datetime
    identifier: constr(min_length=1, max_length=128)
    playerContext: Optional[PlayerContext] = None
    requested: datetime
    version: constr(pattern=r'[0-9]+\.[0-9]+\.[0-9]+')


class UpdateActivityRequest(BaseModel):
    constraints: Optional[Constraints] = None
    nowPlaying: Optional[PlayerContext] = None
    previouslyPlaying: Optional[PlayerContext] = None
    report: QueueActivityReportEvent
    timestamp: datetime
    userActivity: UserActivity
    version: constr(pattern=r'[0-9]+\.[0-9]+\.[0-9]+')


class UpdateMediaAffinityIntent(Intent):
    affinityType: Optional[MediaAffinityType] = None
    class_: Class11 = Field(..., alias='class')
    mediaItems: Optional[List[MediaItem]] = None
    mediaSearch: Optional[MediaSearch] = None


class Params2(BaseModel):
    intent: UpdateMediaAffinityIntent


class UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse(
    InvocationResponse
):
    method: Literal['UpdateMediaAffinityIntentHandling.resolveAffinityType']
    result: Result11


class UpdateMediaAffinityIntentResponse(IntentResponse):
    class_: Class12 = Field(..., alias='class')
    code: UpdateMediaAffinityIntentResponseCode


class Unsupported3(BaseModel):
    reason: Optional[UpdateMediaAffinityMediaItemUnsupportedReason] = None


class UpdateMediaAffinityMediaItemResolutionResult(IntentResolutionResult):
    class_: Optional[Class13] = Field(None, alias='class')
    confirmationRequired: Optional[ConfirmationRequired4] = None
    disambiguation: Optional[Disambiguation2] = None
    success: Optional[Success4] = None
    unsupported: Optional[Unsupported3] = None


class AddMediaIntent(Intent):
    class_: Class = Field(..., alias='class')
    mediaDestination: Optional[MediaDestination] = None
    mediaItems: Optional[List[MediaItem]] = None
    mediaSearch: Optional[MediaSearch] = None


class Params(BaseModel):
    intent: AddMediaIntent


class Result2(BaseModel):
    resolutionResult: Optional[AddMediaMediaDestinationResolutionResult] = None


class AddMediaIntentHandlingResolveMediaDestinationInvocationResponse(
    InvocationResponse
):
    method: Literal['AddMediaIntentHandling.resolveMediaDestination']
    result: Result2


class AddMediaIntentResponse(IntentResponse):
    class_: Class1 = Field(..., alias='class')
    code: AddMediaIntentResponseCode


class AddMediaMediaItemResolutionResult(IntentResolutionResult):
    class_: Optional[Class3] = Field(None, alias='class')
    confirmationRequired: Optional[ConfirmationRequired4] = None
    disambiguation: Optional[Disambiguation2] = None
    success: Optional[Success4] = None
    unsupported: Optional[Unsupported1] = None


class Invocation(BaseModel):
    method: str
    params: Dict[str, Any]
    session: Optional[Session] = None


class Result4(BaseModel):
    response: PlayMediaIntentResponse


class PlayMediaIntentHandlingHandleInvocationResponse(InvocationResponse):
    method: Literal['PlayMediaIntentHandling.handle']
    result: Result4


class PlayMediaIntentHandlingInvocation(Invocation):
    method: Method6
    params: Params1


class Result5(BaseModel):
    resolutionResult: List[PlayMediaMediaItemResolutionResult]


class PlayMediaIntentHandlingResolveMediaItemsInvocationResponse(InvocationResponse):
    method: Literal['PlayMediaIntentHandling.resolveMediaItems']
    result: Result5


class Queue(BaseModel):
    content: List[Content] = Field(..., max_length=1000)
    contentItemsCount: Optional[int] = None
    controls: Optional[QueueControlMapping] = None
    identifier: QueueIdentifier
    insertPointer: Optional[QueueInsertPointer] = None
    nextContentUrl: Optional[constr(min_length=1, max_length=2000)] = None
    playPointer: Optional[QueuePlayPointer] = None
    prerollSeconds: Optional[float] = None
    previousContentUrl: Optional[constr(min_length=1, max_length=2000)] = None
    skipsRemaining: Optional[int] = None
    version: constr(pattern=r'[0-9]+\.[0-9]+\.[0-9]+', max_length=25)


class UpdateActivityResponse(BaseModel):
    queue: Optional[Queue] = None
    userActivity: Optional[UserActivity] = None


class Result10(BaseModel):
    response: UpdateMediaAffinityIntentResponse


class UpdateMediaAffinityIntentHandlingHandleInvocationResponse(InvocationResponse):
    method: Literal['UpdateMediaAffinityIntentHandling.handle']
    result: Result10


class UpdateMediaAffinityIntentHandlingInvocation(Invocation):
    method: Method14
    params: Params2


class Result12(BaseModel):
    resolutionResult: List[UpdateMediaAffinityMediaItemResolutionResult]


class UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse(
    InvocationResponse
):
    method: Literal['UpdateMediaAffinityIntentHandling.resolveMediaItems']
    result: Result12


class IntentPlayMediaPostRequest(RootModel[List[PlayMediaIntentHandlingInvocation]]):
    root: List[PlayMediaIntentHandlingInvocation]


class IntentUpdateMediaAffinityPostRequest(
    RootModel[List[UpdateMediaAffinityIntentHandlingInvocation]]
):
    root: List[UpdateMediaAffinityIntentHandlingInvocation]


class Result(BaseModel):
    response: AddMediaIntentResponse


class AddMediaIntentHandlingConfirmInvocationResponse(InvocationResponse):
    method: Literal['AddMediaIntentHandling.confirm']
    result: Result


class AddMediaIntentHandlingHandleInvocationResponse(InvocationResponse):
    method: Literal['AddMediaIntentHandling.handle']
    result: Result


class AddMediaIntentHandlingInvocation(Invocation):
    method: Method2
    params: Params


class Result3(BaseModel):
    resolutionResult: Optional[List[AddMediaMediaItemResolutionResult]] = None


class AddMediaIntentHandlingResolveMediaItemsInvocationResponse(InvocationResponse):
    method: Literal['AddMediaIntentHandling.resolveMediaItems']
    result: Result3


class PlayMediaIntentHandlingInvocationResponse(
    RootModel[
        Union[
            PlayMediaIntentHandlingResolveMediaItemsInvocationResponse,
            PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse,
            PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse,
            PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse,
            PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse,
            PlayMediaIntentHandlingHandleInvocationResponse,
            ProtocolExceptionInvocationResponse,
        ]
    ]
):
    root: Union[
        PlayMediaIntentHandlingResolveMediaItemsInvocationResponse,
        PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse,
        PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse,
        PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse,
        PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse,
        PlayMediaIntentHandlingHandleInvocationResponse,
        ProtocolExceptionInvocationResponse,
    ] = Field(..., discriminator='method')


class UpdateMediaAffinityIntentHandlingInvocationResponse(
    RootModel[
        Union[
            UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse,
            UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse,
            UpdateMediaAffinityIntentHandlingHandleInvocationResponse,
            ProtocolExceptionInvocationResponse,
        ]
    ]
):
    root: Union[
        UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse,
        UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse,
        UpdateMediaAffinityIntentHandlingHandleInvocationResponse,
        ProtocolExceptionInvocationResponse,
    ] = Field(..., discriminator='method')


class IntentAddMediaPostRequest(RootModel[List[AddMediaIntentHandlingInvocation]]):
    root: List[AddMediaIntentHandlingInvocation]


class IntentPlayMediaPostResponse(
    RootModel[List[PlayMediaIntentHandlingInvocationResponse]]
):
    root: List[PlayMediaIntentHandlingInvocationResponse]


class IntentUpdateMediaAffinityPostResponse(
    RootModel[List[UpdateMediaAffinityIntentHandlingInvocationResponse]]
):
    root: List[UpdateMediaAffinityIntentHandlingInvocationResponse]


class AddMediaIntentHandlingInvocationResponse(
    RootModel[
        Union[
            AddMediaIntentHandlingResolveMediaItemsInvocationResponse,
            AddMediaIntentHandlingResolveMediaDestinationInvocationResponse,
            AddMediaIntentHandlingConfirmInvocationResponse,
            AddMediaIntentHandlingHandleInvocationResponse,
            ProtocolExceptionInvocationResponse,
        ]
    ]
):
    root: Union[
        AddMediaIntentHandlingResolveMediaItemsInvocationResponse,
        AddMediaIntentHandlingResolveMediaDestinationInvocationResponse,
        AddMediaIntentHandlingConfirmInvocationResponse,
        AddMediaIntentHandlingHandleInvocationResponse,
        ProtocolExceptionInvocationResponse,
    ] = Field(..., discriminator='method')


class IntentAddMediaPostResponse(
    RootModel[List[AddMediaIntentHandlingInvocationResponse]]
):
    root: List[AddMediaIntentHandlingInvocationResponse]
