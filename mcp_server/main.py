# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:47:29+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header
from pydantic import confloat, constr

from models import (
    ExtensionConfig,
    ExtensionConfigTag,
    IntentAddMediaPostRequest,
    IntentAddMediaPostResponse,
    IntentPlayMediaPostRequest,
    IntentPlayMediaPostResponse,
    IntentUpdateMediaAffinityPostRequest,
    IntentUpdateMediaAffinityPostResponse,
    PlayMediaRequest,
    Queue,
    UpdateActivityRequest,
    UpdateActivityResponse,
)

app = MCPProxy(
    contact={'name': 'Siri for Developers', 'url': 'https://developer.apple.com/siri/'},
    title='SiriKit Cloud Media',
    version='1.0.2',
    servers=[{'url': 'https://cloudextension-testservice.local/api'}],
)


@app.get('/configuration', tags=['session_configuration_management'])
def extension_configuration(
    x_applecloudextension_session_id: constr(min_length=1, max_length=128) = Header(
        ..., alias='x-applecloudextension-session-id'
    ),
    x_applecloudextension_retry_count: Optional[confloat(ge=1.0)] = Header(
        None, alias='x-applecloudextension-retry-count'
    ),
    request__timeout: confloat(ge=1.0) = Header(..., alias='Request-Timeout'),
    user__agent: constr(
        pattern=r'AppleCloudExtension/([0-9]+\.[0-9]+\.[0-9]+) *.*', max_length=250
    ) = Header(..., alias='User-Agent'),
    accept__language: str = Header(..., alias='Accept-Language'),
    if__none__match: Optional[ExtensionConfigTag] = Header(None, alias='If-None-Match'),
    cache__control: str = Header(..., alias='Cache-Control'),
):
    """
    Configuration Resource
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/intent/addMedia',
    tags=['media_intent_handling', 'session_configuration_management'],
)
def add_media_intent_handling(
    x_applecloudextension_session_id: constr(min_length=1, max_length=128) = Header(
        ..., alias='x-applecloudextension-session-id'
    ),
    x_applecloudextension_retry_count: Optional[confloat(ge=1.0)] = Header(
        None, alias='x-applecloudextension-retry-count'
    ),
    request__timeout: confloat(ge=1.0) = Header(..., alias='Request-Timeout'),
    user__agent: constr(
        pattern=r'AppleCloudExtension/([0-9]+\.[0-9]+\.[0-9]+) *.*', max_length=250
    ) = Header(..., alias='User-Agent'),
    accept__language: str = Header(..., alias='Accept-Language'),
    body: IntentAddMediaPostRequest = None,
):
    """
    addMedia
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/intent/playMedia',
    tags=['media_intent_handling', 'session_configuration_management'],
)
def play_media_intent_handling(
    x_applecloudextension_session_id: constr(min_length=1, max_length=128) = Header(
        ..., alias='x-applecloudextension-session-id'
    ),
    x_applecloudextension_retry_count: Optional[confloat(ge=1.0)] = Header(
        None, alias='x-applecloudextension-retry-count'
    ),
    request__timeout: confloat(ge=1.0) = Header(..., alias='Request-Timeout'),
    user__agent: constr(
        pattern=r'AppleCloudExtension/([0-9]+\.[0-9]+\.[0-9]+) *.*', max_length=250
    ) = Header(..., alias='User-Agent'),
    accept__language: str = Header(..., alias='Accept-Language'),
    body: IntentPlayMediaPostRequest = None,
):
    """
    playMedia
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/intent/updateMediaAffinity',
    tags=['media_intent_handling', 'session_configuration_management'],
)
def update_media_affinity_intent_handling(
    x_applecloudextension_session_id: constr(min_length=1, max_length=128) = Header(
        ..., alias='x-applecloudextension-session-id'
    ),
    x_applecloudextension_retry_count: Optional[confloat(ge=1.0)] = Header(
        None, alias='x-applecloudextension-retry-count'
    ),
    request__timeout: confloat(ge=1.0) = Header(..., alias='Request-Timeout'),
    user__agent: constr(
        pattern=r'AppleCloudExtension/([0-9]+\.[0-9]+\.[0-9]+) *.*', max_length=250
    ) = Header(..., alias='User-Agent'),
    accept__language: str = Header(..., alias='Accept-Language'),
    body: IntentUpdateMediaAffinityPostRequest = None,
):
    """
    updateMediaAffinity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/queues/playMedia',
    tags=['media_intent_handling', 'session_configuration_management'],
)
def play_media_on_queue(
    x_applecloudextension_session_id: constr(min_length=1, max_length=128) = Header(
        ..., alias='x-applecloudextension-session-id'
    ),
    x_applecloudextension_retry_count: Optional[confloat(ge=1.0)] = Header(
        None, alias='x-applecloudextension-retry-count'
    ),
    user__agent: constr(
        pattern=r'AppleCloudExtension/([0-9]+\.[0-9]+\.[0-9]+) *.*', max_length=250
    ) = Header(..., alias='User-Agent'),
    accept__language: str = Header(..., alias='Accept-Language'),
    body: PlayMediaRequest = None,
):
    """
    playMedia
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/queues/updateActivity',
    tags=['user_activity_tracking', 'session_configuration_management'],
)
def update_activity_on_queue(
    x_applecloudextension_session_id: constr(min_length=1, max_length=128) = Header(
        ..., alias='x-applecloudextension-session-id'
    ),
    x_applecloudextension_retry_count: Optional[confloat(ge=1.0)] = Header(
        None, alias='x-applecloudextension-retry-count'
    ),
    user__agent: constr(
        pattern=r'AppleCloudExtension/([0-9]+\.[0-9]+\.[0-9]+) *.*', max_length=250
    ) = Header(..., alias='User-Agent'),
    accept__language: str = Header(..., alias='Accept-Language'),
    body: UpdateActivityRequest = None,
):
    """
    updateActivity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
